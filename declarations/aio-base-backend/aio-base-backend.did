type Platform = variant {
  Windows;
  Linux;
  Both;
};

type WorkStatus = variant {
  Todo;
  InProgress;
  Completed;
  Cancelled;
};

type TraceStatus = variant {
  Ok;
  Recall;
  Fail;
};

type TransferStatus = variant {
  Pending;
  Completed;
  Failed;
};

type RiskLevel = variant {
  Low;
  Medium;
  High;
};

type SubscriptionPlan = variant {
  Free;
  Basic;
  Premium;
  Enterprise;
};

type IOData = record {
  data_type: text;
  value: text;
};

type CallItem = record {
  id: nat64;
  protocol: text;
  agent: text;
  call_type: text;
  method: text;
  inputs: vec IOData;
  outputs: vec IOData;
  status: text;
};

type TraceItem = record {
  id: text;
  trace_id: text;
  owner: text;
  created_at: nat64;
  updated_at: nat64;
  calls: vec CallItem;
  metadata: opt text;
  amount: nat64;
  from_account: Account;
  to_account: Account;
  status: TransferStatus;
  error: opt text;
};

type Account = record {
  owner: principal;
  subaccount: opt vec nat8;
};

type AgentItem = record {
  id: nat64;
  name: text;
  description: text;
  author: text;
  owner: text;
  platform: opt Platform;
  git_repo: text;
  homepage: opt text;
  input_params: opt text;
  output_example: opt text;
  image_url: opt text;
  exec_file_url: opt text;
  version: text;
};

type McpItem = record {
  id: nat64;
  name: text;
  description: text;
  author: text;
  owner: text;
  git_repo: text;
  exec_file: opt text;
  homepage: opt text;
  remote_endpoint: opt text;
  mcp_type: text;
  community_body: opt text;
  resources: bool;
  prompts: bool;
  tools: bool;
  sampling: bool;
};

type WorkItem = record {
  id: nat64;
  title: text;
  description: text;
  status: WorkStatus;
  created_at: nat64;
  updated_at: nat64;
  owner: text;
  assigned_to: opt text;
  tags: vec text;
  metadata: opt text;
};

type SchemaProperty = record {
  property_type: text;
  description: opt text;
  default: opt text;
  enum_values: opt vec text;
  items: opt SchemaProperty;
  properties: opt vec record { text; SchemaProperty };
  required: opt vec text;
};

type InputSchema = record {
  schema_type: text;
  properties: vec record { text; SchemaProperty };
  required: opt vec text;
};

type Method = record {
  name: text;
  description: text;
  required_params: opt vec text;
  input_schema: opt InputSchema;
};

type Source = record {
  author: text;
  version: text;
  github: text;
};

type AioIndex = record {
  id: text;
  description: text;
  author: text;
  version: text;
  github: text;
  transport: vec text;
  methods: vec Method;
  source: Source;
  keywords: vec text;
  scenarios: vec text;
};

type InvertedIndexItem = record {
  keyword: text;
  keyword_group: text;
  mcp_name: text;
  method_name: text;
  source_field: text;
  confidence: float32;
  standard_match: text;
};

type TokenInfo = record {
  token_balance: nat64;
  credit_balance: nat64;
  staked_credits: nat64;
  kappa_multiplier: float64;
};

type AccountInfo = record {
  principal_id: text;
  token_info: TokenInfo;
  created_at: nat64;
  updated_at: nat64;
  metadata: opt text;
};

type TokenActivityType = variant {
  Transfer;
  Stack;
  Unstack;
  Claim;
  Grant;
  Vest;
};

type TokenActivity = record {
  timestamp: nat64;
  from: text;
  to: text;
  amount: nat64;
  activity_type: TokenActivityType;
  status: TransferStatus;
  metadata: opt text;
};

type CreditActivityType = variant {
  Earn;
  Spend;
  Stack;
  Unstack;
  Reward;
};

type CreditActivity = record {
  timestamp: nat64;
  principal_id: text;
  amount: nat64;
  activity_type: CreditActivityType;
  status: TransferStatus;
  metadata: opt text;
};

type TokenGrantStatus = variant {
  Pending;
  Active;
  Completed;
  Cancelled;
};

type TokenGrant = record {
  recipient: text;
  amount: nat64;
  start_time: nat64;
  claimed_amount: nat64;
  status: TokenGrantStatus;
};

type EmissionPolicy = record {
  base_rate: nat64;
  kappa_factor: float64;
  staking_bonus: float64;
  subscription_multipliers: vec record { SubscriptionPlan; float64 };
  last_update_time: nat64;
};

type GrantAction = variant {
  NewUser;
  NewDeveloper;
};

type GrantPolicy = record {
  grant_amount: nat64;
  grant_action: GrantAction;
  grant_duration: nat64;
};

service : {
  // Basic API
  "greet": (text) -> (text) query;
  
  // Agent Asset API
  "get_agent_item": (nat64) -> (opt AgentItem) query;
  "get_all_agent_items": () -> (vec AgentItem) query;
  "get_user_agent_items": () -> (vec AgentItem) query;
  "get_user_agent_items_paginated": (nat64, nat64) -> (vec AgentItem) query;
  "get_agent_items_paginated": (nat64, nat64) -> (vec AgentItem) query;
  "get_agent_item_by_name": (text) -> (opt AgentItem) query;
  "add_agent_item": (AgentItem, text) -> (variant { Ok: nat64; Err: text });
  "update_agent_item": (nat64, AgentItem) -> (variant { Ok; Err: text });
  
  // MCP Asset API
  "get_mcp_item": (nat64) -> (opt McpItem) query;
  "get_all_mcp_items": () -> (vec McpItem) query;
  "get_user_mcp_items": () -> (vec McpItem) query;
  "get_user_mcp_items_paginated": (nat64, nat64) -> (vec McpItem) query;
  "get_mcp_items_paginated": (nat64, nat64) -> (vec McpItem) query;
  "get_mcp_item_by_name": (text) -> (opt McpItem) query;
  "add_mcp_item": (McpItem, text) -> (variant { Ok: nat64; Err: text });
  "update_mcp_item": (nat64, McpItem) -> (variant { Ok; Err: text });
  "delete_mcp_item": (text) -> (variant { Ok; Err: text });
  
  // Work Ledger API - Trace System
  "get_trace": (nat64) -> (opt TraceItem) query;
  "get_trace_by_id": (text) -> (opt TraceItem) query;
  "get_user_traces": () -> (vec TraceItem) query;
  "get_user_traces_paginated": (nat64, nat64) -> (vec TraceItem) query;
  "get_traces_paginated": (nat64, nat64) -> (vec TraceItem) query;
  "add_trace": (TraceItem) -> (variant { Ok; Err: text });

  // AIO Protocol Index API
  "create_aio_index_from_json": (text, text) -> (variant { Ok; Err: text });
  "get_aio_index": (text) -> (opt AioIndex) query;
  "get_all_aio_indices": () -> (vec AioIndex) query;
  "get_aio_indices_paginated": (nat64, nat64) -> (vec AioIndex) query;
  "search_aio_indices_by_keyword": (text) -> (vec AioIndex) query;
  "update_aio_index": (text, text) -> (variant { Ok; Err: text });
  "delete_aio_index": (text) -> (variant { Ok; Err: text });
  "export_aio_index_to_json": (text) -> (variant { Ok: text; Err: text }) query;
  "get_aio_indices_count": () -> (nat64) query;

  // Inverted Index API
  "store_inverted_index": (text, text) -> (variant { Ok; Err: text });
  "get_all_inverted_index_items": () -> (text) query;
  "get_all_keywords": () -> (text) query;
  "find_inverted_index_by_keyword": (text) -> (text) query;
  "find_inverted_index_by_group": (text) -> (text) query;
  "find_inverted_index_by_mcp": (text) -> (text) query;
  "find_inverted_index_by_confidence": (float32) -> (text) query;
  "find_inverted_index_by_keywords": (vec text, float32) -> (text) query;
  "delete_inverted_index_by_mcp": (text) -> (variant { Ok; Err: text });
  "revert_Index_find_by_keywords_strategy": (vec text) -> (text) query;

  // Finance API
  "get_account_info": (text) -> (opt AccountInfo) query;
  "add_account": (text) -> (variant { Ok: AccountInfo; Err: text });
  "get_all_accounts": () -> (vec AccountInfo) query;
  "get_accounts_paginated": (nat64, nat64) -> (vec AccountInfo) query;
  "delete_account": (text) -> (variant { Ok; Err: text });
  "stack_credit": (text, nat64) -> (variant { Ok: AccountInfo; Err: text });
  "unstack_credit": (text, nat64) -> (variant { Ok: AccountInfo; Err: text });
  "claim_token": (text, nat64) -> (variant { Ok: AccountInfo; Err: text });
  "add_token_balance": (text, nat64) -> (variant { Ok: AccountInfo; Err: text });
  "get_balance_summary": (text) -> (record { total_count: nat64; total_amount: nat64; success_count: nat64; unclaimed_balance: nat64 }) query;
  "get_traces_by_operation": (text, text) -> (vec TraceItem) query;
  "get_traces_by_status": (text, TransferStatus) -> (vec TraceItem) query;
  "get_traces_by_time_period": (text, text) -> (vec TraceItem) query;
  "get_traces_sorted": (text, text, bool) -> (vec TraceItem) query;
  "get_traces_with_filters": (text, opt vec text, opt vec TransferStatus, opt nat64, opt nat64, opt nat, opt nat, opt vec Account) -> (vec TraceItem) query;
  "get_traces_statistics": (text, opt nat64, opt nat64) -> (record { total_count: nat64; total_amount: nat; success_amount: nat; failed_amount: nat }) query;

  // Token Economy Service
  "convert_aio_to_credits": (text, nat64) -> (variant { Ok: nat64; Err: text });
  "update_exchange_ratio": (float64) -> (variant { Ok; Err: text });
  "subscribe_plan": (text, SubscriptionPlan) -> (variant { Ok; Err: text });
  "get_kappa": (text) -> (variant { Ok: float64; Err: text });
  "claim_reward": (text) -> (variant { Ok: nat64; Err: text });
  "init_emission_policy": () -> ();
  "calculate_emission": (text) -> (variant { Ok: nat64; Err: text }) query;
  "get_emission_policy": () -> (variant { Ok: EmissionPolicy; Err: text }) query;
  "update_emission_policy": (EmissionPolicy) -> (variant { Ok; Err: text });
  "create_token_grant": (TokenGrant) -> (variant { Ok; Err: text });
  "get_token_grant": (text) -> (bool) query;
  "claim_grant": (text) -> (variant { Ok: nat64; Err: text });
  "get_all_token_grants": () -> (vec TokenGrant) query;
  "get_token_grants_paginated": (nat64, nat64) -> (vec TokenGrant) query;
  "get_token_grants_by_recipient": (text) -> (vec TokenGrant) query;
  "get_token_grants_by_status": (text) -> (vec TokenGrant) query;
  "get_token_grants_count": () -> (nat64) query;

  // Token Activity API
  "get_token_activities": (text) -> (vec TokenActivity) query;
  "get_token_activities_paginated": (text, nat64, nat64) -> (vec TokenActivity) query;
  "get_token_activities_by_type": (text, TokenActivityType) -> (vec TokenActivity) query;
  "get_token_activities_by_time_period": (text, nat64, nat64) -> (vec TokenActivity) query;
  "get_token_activity_statistics": (text) -> (record { total_count: nat64; total_amount: nat64; success_count: nat64 }) query;

  // Credit Activity API
  "get_credit_activities": (text) -> (vec CreditActivity) query;
  "get_credit_activities_paginated": (text, nat64, nat64) -> (vec CreditActivity) query;
  "get_credit_activities_by_type": (text, CreditActivityType) -> (vec CreditActivity) query;
  "get_credit_activities_by_time_period": (text, nat64, nat64) -> (vec CreditActivity) query;
  "get_credit_activity_statistics": (text) -> (record { total_count: nat64; total_amount: nat64; success_count: nat64 }) query;

  // Additional Methods
  "log_credit_usage": (text, nat64, text, opt text) -> (variant { Ok; Err: text });
  "use_credit": (text, nat64, text, opt text) -> (variant { Ok: AccountInfo; Err: text });
  "grant_token": (TokenGrant) -> (variant { Ok; Err: text });
  "transfer_token": (text, text, nat64) -> (variant { Ok: AccountInfo; Err: text });

  // Grant Policy API
  "init_grant_policy": (opt GrantPolicy) -> ();
  "check_is_newuser": (text) -> (bool) query;
  "create_and_claim_newuser_grant": (text) -> (variant { Ok: nat64; Err: text });
}
